{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAIaA,G,MAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAY,iBAAjB,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eACtB,mCAAOL,EAAMI,QAAQE,QAErB,4BAAIN,EAAMI,QAAQG,aCLTC,G,MAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACCD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCHdM,G,YAAW,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACpB,uBAAOZ,UAAU,SACjBa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCiCCG,E,kDAhCb,aAAc,IAAD,8BACX,gBAYJH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAZnC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJJ,E,gEAOM,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,+BAOhC,IAAD,EACwBC,KAAKN,MAA7Bb,EADA,EACAA,SAAUU,EADV,EACUA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBACpG,OACE,sBAAK9B,UAAU,MAAf,UACA,kDACA,cAAC,EAAD,CACAW,YAAY,kBACZC,aAAce,KAAKf,eAEnB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA7BNI,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.db56e9b8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n    <div className = 'card-container'>\r\n    <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2`} />\r\n    <h2 > {props.monster.name}\r\n    </h2>\r\n    <p>{props.monster.email}\r\n    </p></div>\r\n);","import React from 'react';\r\nimport {Card} from '../card/card.component';\r\nimport './card-list.styes.css';\r\n\r\nexport const CardList = props=> (\r\n    <div className='card-list'>\r\n    {props.monsters.map(monster => (\r\n        <Card key={monster.id} monster={monster}/>\r\n        ))}\r\n    </div>\r\n);  \r\n    ","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox =({placeholder, handleChange}) => (\r\n    <input className='search'\r\n    type='search' \r\n    placeholder={placeholder} \r\n    onChange={handleChange}\r\n    />\r\n);","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\n//import logo from './logo.svg';\nimport './App.css';\nimport {SearchBox} from './components/search-box/search-box.component';\n\n\nclass App extends Component{\n\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\ncomponentDidMount() {\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(users => this.setState({monsters: users}));\n}\n\nhandleChange = e => {\n  this.setState({searchField: e.target.value})\n}\n\nrender() {\n  const {monsters, searchField}= this.state;\n  const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n  return(\n    <div className=\"App\">\n    <h1>Monsters Rolodex</h1>\n    <SearchBox\n    placeholder='search monsters'\n    handleChange={this.handleChange}\n    />\n    <CardList monsters={filteredMonsters}/>\n    </div>\n  );\n}\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}